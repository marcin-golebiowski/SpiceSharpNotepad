@page "/"
@using BlazorWorker.Core
@using BlazorWorker.WorkerCore
@using System.Diagnostics
@using BlazorWorker.BackgroundServiceFactory
@using Newtonsoft.Json
@using SpiceSharpParser
@using SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
@inject IWorkerFactory workerFactory
@inject NavigationManager Navigator
@using System.Linq
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
<PageTitle>Index</PageTitle>
@inject IJSRuntime JSRuntime

<h1>SpiceSharp simulation</h1>



<div>
<textarea id="Raw" @bind="RawText" @ref="RawRef" cols="150" rows="15">
</textarea>
</div>
<div>
<button class="btn btn-primary" @onclick="Simulate">Simulate</button>
</div>
<div>
Execution time: <input type="ExecutionTime" @bind="ExectionTime" /> seconds
</div>

<div>
    <div id="charts">
    </div>
</div>

@code {
    string RawText = "";
    ElementReference RawRef;
    string ExectionTime = "";

    public class SimulationTask
    {
        public HttpClient HttpClient  { get; }

        private string _baseUri;

        public IWorkerMessageService MessageService { get; }

        public SimulationTask(HttpClient httpClient, IWorkerMessageService messageService)
        {
            HttpClient = httpClient;
            MessageService = messageService;
        }

        public async Task<List<XyPlot>> Simulate(string rawText)
        {
            try
            {
                var progressDelegate = (object args) => MessageService.PostMessageAsync("Data:" + JsonConvert.SerializeObject(args));

                var parser = new SpiceNetlistParser();
                var parseResult = parser.ParseNetlist(rawText);
                var netlist = parseResult.FinalModel;

                // Translating netlist model to SpiceSharp
                var reader = new SpiceSharpReader();
                var spiceSharpModel = reader.Read(netlist);

                // Simulation using SpiceSharp
                var simulation = spiceSharpModel.Simulations.Single();
                simulation.Run(spiceSharpModel.Circuit);

                // Return plots
                return spiceSharpModel.XyPlots;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
    }

    private async Task Simulate()
    {
        // Create worker.
        var worker = await workerFactory.CreateAsync();
        worker.IncomingMessage += this.OnWorkerMessage;

        var service = await worker.CreateBackgroundServiceAsync<SimulationTask>(options =>
                    options
                    .AddAssemblies("Microsoft.AspNetCore.Components.dll", "Microsoft.AspNetCore.Components")
                    .AddAssemblies("BlazorWorker.Core.dll", "BlazorWorker.Core")
                    .AddAssemblies("System.Net.Http.dll", "System.Net.Http")
                    .AddAssemblies("System.Net.Primitives.dll", "System.Net.Primitives")
                    .AddAssemblies("System.Security.Cryptography.X509Certificates.dll", "System.Security.Cryptography.X509Certificates")
                    .AddAssemblies("System.Diagnostics.Tracing.dll", "System.Diagnostics.Tracing")
                    .AddAssemblies("SpiceSharpParser.dll", "SpiceSharpParser")
                    .AddAssemblies("SpiceSharp.dll", "SpiceSharp")
                    .AddAssemblies("SpiceSharpBehavioral.dll", "SpiceSharpBehavioral")
                    .AddAssemblies("System.Net.Security.dll", "System.Net.Security")
                    .AddAssemblies("Microsoft.JSInterop.dll", "Microsoft.JSInterop")                    
                    .AddConventionalAssemblyOfService()
                    .AddHttpClient());


        await worker.PostMessageAsync("BaseUrl:" + Navigator.BaseUri);

        var netList = RawText;

        Stopwatch watch = new Stopwatch();
        watch.Start();
        var plots = await service.RunAsync(s => s.Simulate(netList));

        if (plots == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error ocurred");
            return;
        }

        await JSRuntime.InvokeVoidAsync("destroyCharts");

        var i = 0;
        foreach (var plot in plots)
        {
            var series = plot.Series;
            foreach (var serie in series)
            {
                i++;
                await JSRuntime.InvokeVoidAsync("createChart", i, JsonConvert.SerializeObject(serie));
            }
        }

        watch.Stop();
        ExectionTime = watch.Elapsed.TotalSeconds.ToString();
    }


    public void OnWorkerMessage(object sender, string message)
    {
        if (message.StartsWith($"Data:"))
        {
            StateHasChanged();
        }
    }

    private void Update(string data)
    {
    }
}

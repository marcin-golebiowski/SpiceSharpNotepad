@page "/"
@using BlazorWorker.Core
@using BlazorWorker.WorkerCore
@using System.Diagnostics
@using BlazorWorker.BackgroundServiceFactory
@using Newtonsoft.Json
@using SpiceSharpParser
@using SpiceSharpParser.ModelReaders.Netlist.Spice.Readers.Controls.Plots
@inject IWorkerFactory workerFactory
@inject NavigationManager Navigator
@using System.Linq
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
<PageTitle>Index</PageTitle>
@inject IJSRuntime JSRuntime

<h1>SpiceSharp simulation</h1>

<div>
<h2>Netlist:</h2>
<textarea id="Raw" @bind="RawText" @ref="RawRef" cols="150" rows="15">
</textarea>
</div>
<div>
<button class="btn btn-primary" @onclick="Simulate">Simulate</button>
</div>
<div>
<h2>Logs:</h2>
<textarea id="Logs" @bind="LogsText" @ref="LogsRef" cols="150" rows="3">
</textarea>
</div>
<div>
Execution time: <input type="ExecutionTime" @bind="ExectionTime" /> seconds
</div>

<div>
    <div id="charts">
    </div>
</div>

@code {
    string RawText = "";
    ElementReference RawRef;
    string LogsText = "";
    ElementReference LogsRef;
    string ExectionTime = "";

    public class SimulationResult
    {
        public Exception Exception { get; set; }
        public List<XyPlot> Plots { get; set; }
        public bool IsSuccessful { get; set; } = true;
    }

    public class SimulationTask
    {
        public HttpClient HttpClient  { get; }

        private string _baseUri;

        public IWorkerMessageService MessageService { get; }

        public SimulationTask(HttpClient httpClient, IWorkerMessageService messageService)
        {
            HttpClient = httpClient;
            MessageService = messageService;
        }

        public async Task<SimulationResult> Simulate(string rawText)
        {
            try
            {
                var progressDelegate = (object args) => MessageService.PostMessageAsync("Data:" + JsonConvert.SerializeObject(args));

                var parser = new SpiceNetlistParser();
                var parseResult = parser.ParseNetlist(rawText);

                if (parseResult.ValidationResult.HasError)
                {
                    
                    return
                        new SimulationResult
                        {
                            Plots = null,
                            Exception = new Exception("Parse errors: " + string.Join("\r\n", parseResult.ValidationResult.Errors.Select(e => e.Message + ":" + e.Exception.ToString()))),
                            IsSuccessful = false
                        };
                }

                var netlist = parseResult.FinalModel;

                // Translating netlist model to SpiceSharp
                var reader = new SpiceSharpReader();
                var spiceSharpModel = reader.Read(netlist);


                if (!spiceSharpModel.Simulations.Any())
                {
                    return
                        new SimulationResult
                        {
                            Plots = null,
                            Exception = new Exception("No simulations found"),
                            IsSuccessful = false
                        };
                }

                // Simulation using SpiceSharp
                var simulation = spiceSharpModel.Simulations.First();
                simulation.Run(spiceSharpModel.Circuit);

                // Return plots
                return
                     new SimulationResult
                     {
                         Plots = spiceSharpModel.XyPlots,
                         Exception = null,
                         IsSuccessful = true
                     };
            }
            catch (Exception ex)
            {
                return
                 new SimulationResult
                     {
                         Plots = null,
                         Exception = ex,
                         IsSuccessful = false
                     };
            }
        }
    }

    private async Task Simulate()
    {
        var worker = await workerFactory.CreateAsync();
        var service = await worker.CreateBackgroundServiceAsync<SimulationTask>(options =>
                    options
                    .AddAssemblies("Microsoft.AspNetCore.Components.dll", "Microsoft.AspNetCore.Components")
                    .AddAssemblies("BlazorWorker.Core.dll", "BlazorWorker.Core")
                    .AddAssemblies("System.Net.Http.dll", "System.Net.Http")
                    .AddAssemblies("System.Net.Primitives.dll", "System.Net.Primitives")
                    .AddAssemblies("System.Security.Cryptography.X509Certificates.dll", "System.Security.Cryptography.X509Certificates")
                    .AddAssemblies("System.Diagnostics.Tracing.dll", "System.Diagnostics.Tracing")
                    .AddAssemblies("SpiceSharpParser.dll", "SpiceSharpParser")
                    .AddAssemblies("SpiceSharp.dll", "SpiceSharp")
                    .AddAssemblies("SpiceSharpBehavioral.dll", "SpiceSharpBehavioral")
                    .AddAssemblies("System.Net.Security.dll", "System.Net.Security")
                    .AddAssemblies("Microsoft.JSInterop.dll", "Microsoft.JSInterop")                    
                    .AddConventionalAssemblyOfService()
                    .AddHttpClient());


        var netList = RawText;

        Stopwatch watch = new Stopwatch();
        watch.Start();
        var result = await service.RunAsync(s => s.Simulate(netList));
        watch.Stop();

        if (result == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Critical error ocurred");
            return;
        }
        else
        {
            if (result.IsSuccessful)
            {
                await JSRuntime.InvokeVoidAsync("destroyCharts");

                var i = 0;
                foreach (var plot in result.Plots)
                {
                    var series = plot.Series;
                    foreach (var serie in series)
                    {
                        i++;
                        await JSRuntime.InvokeVoidAsync("createChart", i, JsonConvert.SerializeObject(serie));
                    }
                }

                LogsText = "Success";
                ExectionTime = watch.Elapsed.TotalSeconds.ToString();
            }
            else
            {
                LogsText = result.Exception.ToString();
            }
        }
    }
}
